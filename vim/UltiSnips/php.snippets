snippet tc "A test class"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`;

class `!p snip.rv=snip.fn.split('.')[0]` extends \PHPUnitHelper\TestCase
{
    public function test$1()
    {
        $0
    }
}
endsnippet

snippet dtc "A database test class"
<?php

namespace $1;

class ${2:`!p snip.rv=snip.fn.split('.')[0]`} extends \FastSetUpDatabaseTestCase
{
    public function test$3()
    {
        $0
    }

    protected function setUp(): void
    {
        parent::setUp();
    }

    protected function getDataSet()
    {
        return $this->createArrayDataSet(
            [
                'table' => [
                ],
            ]
        );
    }
}
endsnippet


snippet log "Log a statement"
\SB_Log::get($1)->info($0);
endsnippet

snippet interface "Interface declaration template" b
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`;

interface `!p snip.rv=snip.fn.split('.')[0]`
{
    $0
}
endsnippet

snippet class "A class"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`;

class `!p snip.rv=snip.fn.split('.')[0]`
{
	construct$0
}
endsnippet

snippet pub "A public function"
public function ${1}(${3}): ${4}
{
	${0}
}
endsnippet

snippet pubs "A public static function"
public static function ${1}(${3}): ${4}
{
	${0}
}
endsnippet

snippet pri "A private function"
private function ${1}(${3}): ${4}
{
	${0}
}
endsnippet

snippet pro "A protected function"
protected function ${1}(${3}): ${4}
{
	${0}
}
endsnippet

snippet r "return"
return $0;
endsnippet

snippet construct "__construct()" b
public function __construct(${1:$dependencies})
{
}
$0
endsnippet

snippet er "phpunit expectation return"
$${1}->expects($this->${2}())->method('${3}')
    ->with(${4})
    ->willReturn(${5});
$0
endsnippet

snippet setup "setup"
public function setUp(): void
{
    $0
}
endsnippet
snippet s "setup"
public function setUp(): void
{
    $0
}
endsnippet
